<!-- 
    정의
    WAS가 처음 구동될 때 web.xml을 읽어 웹 애플리케이션 설정을 구성한다.

    web.xml은 DD(Develoyment Descriptior : 배포 설명자) 라고 불리며, Web Application
    설정 파일이다. DD는 Web Application 실행 시 메모리에 로드된다.
    즉, web.xml이란 웹 어플리케이션을 실행시킬 때 함께 올라가야할 설정들을 정의

    설정
    Web.xml에는 크게 3가지가 있다.
    1.DispatcherServlet (클라이언트 요청을 처리)
        DispatcherServlet은 클라이언트의 요청을 전달받는 객체이다. 하는 일은? 당연히 클라이언트의 요청을 처리하는 일이다. 그럼 어떻게 처리할까?
        
        클라이언트의 요청을 처리하려면 크게 4가지 일이 진행되어야 한다.

        첫째, 클라이언트의 요청을 처리해줄 컨트롤러를 찾는다.
        둘째, 컨트롤러를 실행시킨다. (비지니스 로직 처리)
        셋째, 클라이언트에게 보여질 View를 찾는다.
        넷째, 응답 데이터와 View를 클라이언트에게 전달한다.

        요청을 처리할 컨트롤러를 찾는 일은 Handler Mapping이라는 객체가 처리한다. 이 객체는 클라이언트의 요청 경로를 이용해서 컨트롤러를 검색하고, 
        검색된 객체를 DispatcherServlet에게 리턴한다. 
        만약 클라이언트가 'http://~~/test' 를 요청할 경우 /test를 처리할 컨트롤러 객체를 리턴하는 것이다. 

        컨트롤러를 실행시키는 일은 Handler Adapter라는 객체가 처리한다. 
        
        이 객체는 @Controller 어노테이션을 이용해 구현한 컨트롤러 뿐만 아니라, Controller 인터페이스를 구현한 컨트롤러, 특수 목적으로 사용되는 HttpRequestHandler 인터페이스를 구현한 클래스를 동일한 방식으로 실행할 수 있도록 만들어졌다.
        즉, 컨트롤러 실행 업무에 특화된 객체로 Controller를 실행하는 것이다.
        Controller가 실행되면 개발자가 구현한 비지니스 로직을 거쳐 응답 데이터가 추출된다. 실행된 Controller는 리턴할 데이터와 View를 Handler Adapter에게 리턴한다.
        Handler Adapter는 데이터와 view를 ModelAndView 형태로 DispatcherServlet에게 리턴한다.
        여기서 view는 단순히 view의 이름이다. 뭔 소리냐면 이 이름에 해당하는 실제 view를 찾아야한다는 것이다.
        클라이언트에게 보여질 view를 찾는 일은 ViewResolver 객체가 처리한다.

        ViewReolver bean 객체 설정 -->

        <bean id="viewResolver" class="org.springframework.web.sevlet.view.InternalResourceViewResolver">
            <property name="prefix" value="/WEB-INF/view/"/>
            <property name="suffix" value=".jsp"/>
        </bean>

<!--    위는 viewResolver 객체를 설정하는 부분인데 설정된 prefix(접두사), suffix(접미사)를 참조하여 처리한다.
        만약 Controller에서 리턴한 view 이름이 hello였다면 /WEB-INF/view/hello.jsp를 찾아 dispatcher Servlet에게 리턴한다.

        최종적으로 viewResolver가 리턴한 View 객체에 응답 데이터를 넣어 클라이언트에게 리턴한다.

        이처럼 클라이언트의 요청은 DispatcherServlet라는 감독관(?)이 처리한다. 다만 직접 처리하지 않고 적절한 객체들에게 일을 위임하여 처리하고 있다. -->
        
            <!-- 
                1."/"와 동일한 값을 갖고 있는 메서드 검색..(없으면 -> 404) 
                
                2. HomeController => 

                    @RequestMapping(value = "/", method = RequestMethod.GET)
                    public String home(Locale locale, Model model) {

                        return "main";
                    }

                3. "main" 이라는 문자열을 DispatcherServlet 에게 전달

                4. DispatcherServlet은 ViewResolver 객체를 찾고
                ViewResolver에게 "main" 에 대한 구체적인 내용을 문의

                5. ViewResolver 는 
                <beans:property name="prefix" value="/WEB-INF/views/" />
                <beans:property name="suffix" value=".jsp" />
                을 이용하여 
                "/WEB-INF/views/main.jsp" 라고 DispatcherServlet에게 응답

                6. DispatcherServlet는 웹브라우저에게 "/WEB-INF/views/main.jsp" 와 같이 응답

                7. 웹 브라우저는 "/WEB-INF/views/main.jsp" 내용을 달라고 다시 요청

                8. DispatcherServlet은 /WEB-INF/views/ 에 있는 main.jsp 파일을 컴파일 하여 html 형태로 웹 브라우저에게 응답 처리!!

                9. 웹브라우저는 응답받은 html 형태의 문서를 HTML 엔진을 통해 컴파일 하여 사용자에게 출력
             -->

<!--
    2.ContexttLoaderListener (웹 어플리케이션 컨텍스트 단위의 설정을 로드하는)
        앞서 Dispatcher Servlet은 클라이언트의 요청을 처리하는 객체라고 설명했다. 웹 어플리케이션의 규모가 커진다면, 클라이언트의 요청또한 다양해질 것이고, 이를 처리할 Dispatcher Servlet도 늘어날 가능성이 있다. 다른 성격을 가진 서블릿이 생성될 것이고, 설정 또한 서블릿의 성격에 맞게 각각 적용시켜야 한다.
        반면에, 모든 서블릿이 공통으로 가져야할 설정들도 있다. 즉 Servlet Context 단위가 아닌 Application Context 단위의 설정이 필요한데 이를 ContextLoaderListener 객체가 처리한다.
        이 객체는 Application Context 단위의 설정을 생성한다.
        참고로 Application Context 는 Web Application 의 Context이며, 모든 Servlet들이 참조가 가능한 부모 Context이다.
    
    3.Filter (이건 꼭 거쳤으면 좋겟다.)
        클라이언트에서 온 요청을 Dispatcher Servlet이 받기 전 거치는 부분이 있다. 바로 이 Filter 객체이다.
        만약 스프링 시큐리티 필터가 적용되어 있다면, 인가 및 인증 처리를 먼저 처리하고, 인코딩 필터가 적용되어 있다면 클라이언트의 요청데이터를 인코딩하는 작업이 선 처리된 후 Dispatcher Servlet에게 필터링 된 데이터가 전달된다.
-->

<!-- 
    1. web.xml은 DD(배포 설명자)이다.
    2. DD는 Web Application 실행 시 메모리에 로드한다.
    3. web.xml에는 크게 dispatcherServlet, contextLoaderListener, filter를 설정한다.

    만약 tomcat이라는 WAS(Web Application Server)를 통해 이 web Application을 실행시킨다고 가정하면,
     web.xml 파일에 설정한 내용들이 메모리에 로드될 것이다.
-->

<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
 
 <!-- Dispatcher Servlet 생성 -->
 <servlet>
     <servlet-name>myDispatcherServlet</servlet-name>
     <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
     <init-param>
         <param-name>contextConfigLocation</param-name>
         <param-value>classpath:/config/servlet-config.xml</param-value>
     </init-param>
     
     <load-on-startup>1</load-on-startup>
 </servlet>
 <!-- 클라이언트의 요청을 처리하는 Dispatcher Servlet을 myDispathcerServlet이란 이름으로 생성하고,
      이 서블릿에 대한 설정파일로 servlet-config.xml을 지정한다.(controller 스캔용, 코드는 글의 최하단에 첨부)
  -->   

 <servlet-mapping>
     <servlet-name>myDispatcherServlet</servlet-name>
     <url-pattern>/</url-pattern>
 </servlet-mapping>
 <!-- 설정한 Dispatcher Servlet이 처리할 url-pattern을 설정한다.
      '/'경로로 들어오는 모든 요청에 대해서 myDispatcherServlet이 처리를 담당한다.
  -->

 <!-- web application context -->
 <listener>
     <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
 </listener>
 <context-param>
     <param-name>contextConfigLocation</param-name>
     <param-value>
         /WEB-INF/config/application-context.xml
     </param-value>
 </context-param>
 <!-- web application context 단위의 설정파일로 application-context.xml을 설정한다.
      이 설정은 sevlet으로 생성한 myDispatcherServlet에게 공유된다. (view-resolver 설정용, 코드는 글의 최하단에 첨부)
  -->

 <!-- Encoding Filter 생성 -->
 <filter>
     <filter-name>encodingFilter</filter-name>
     <filter-class>
         org.springframework.web.filter.CharacterEncodingFilter
     </filter-class>
     <init-param>
         <param-name>encoding</param-name>
         <param-value>UTF-8</param-value>
     </init-param>
     <init-param>
         <param-name>forceEncoding</param-name>
         <param-value>true</param-value>
     </init-param>
 </filter>
 <!-- 스프링에서 지원하는 encoding Filter를 filter에 추가한다. -->

 <filter-mapping>
     <filter-name>encodingFilter</filter-name>
     <url-pattern>/*</url-pattern>
 </filter-mapping>
 <!-- encoding Filter가 처리할 url-pattern을 설정한다. '/*' 모든 경로에 대해 인코딩 필터를 적용한다. -->

 <!-- 정리하면 이 예제 web.xml은 클라이언트의 요청을 처리할 인코딩 필터와 Dispatcher Servelt을 생성하고, 
      view Resolver를 web application context 단위로 설정하였다. 
  -->
</web-app>
